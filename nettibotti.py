import os
import streamlit as st
from openai import OpenAI
from PyPDF2 import PdfReader
import re

# Alusta OpenAI
api_key = st.secrets.get("OPENAI_API_KEY", os.getenv("OPENAI_API_KEY"))
if not api_key:
    st.error("API-avain puuttuu! Aseta se Settings > Secrets.")
    st.stop()

client = OpenAI(api_key=api_key)

def extract_package_info(pdf_path):
    """Poimii pakettien tiedot PDF:st√§"""
    try:
        reader = PdfReader(pdf_path)
        text = "\n".join(page.extract_text() or "" for page in reader.pages)
        
        # Poimi paketit ja nopeudet
        packages = {}
        matches = re.finditer(
            r"(Kiinte√§ [A-Z+]+|Yhteys Kotiin 5G [A-Z+]+).*?(\d+)\s*Mbit/s", 
            text, re.DOTALL
        )
        for match in matches:
            packages[match.group(1)] = int(match.group(2))
            
        return {
            "packages": packages,
            "tech_info": text[:20000]  # Otetaan 20k merkki√§ analyysiin
        }
    except Exception as e:
        st.error(f"Virhe PDF:n lukemisessa: {str(e)}")
        return None

def generate_response(user_input, context):
    """Luo k√§ytt√§j√§yst√§v√§llisen vastauksen"""
    prompt = f"""
    Olet Telian asiakaspalveluedustaja. Vastaa k√§ytt√§j√§n kysymykseen k√§ytt√§m√§ll√§ alla olevia tietoja.

    TELIAN PAKETIT JA NOPEUDET:
    {context['packages']}

    TEKNISET TIEDOT:
    {context['tech_info']}

    K√ÑYTT√ÑJ√ÑN KYSYMYS:
    {user_input}

    VASTAUSOHJEET:
    1. Keskitty k√§ytt√§j√§n tarpeisiin
    2. √Ñl√§ mainitse dokumentteja tai teknisia l√§hdeviittauksia
    3. Anna selke√§t suositukset konkreettisin perustein
    4. K√§yt√§ arkikielt√§ ja v√§ltt√§√§ teknisia termej√§
    5. Jos et tied√§ vastausta, sano rehellisesti
    """
    
    try:
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": user_input}
            ],
            temperature=0.7,
            max_tokens=1500
        )
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Virhe API-kutsussa: {str(e)}")
        return None

def main():
    st.title("üì∂ Telian Nettineuvoja")
    
    # Lataa tiedot
    pdf_info = extract_package_info("palvelukuvaus.pdf")
    if not pdf_info:
        st.error("Palvelutietoja ei saatavilla")
        st.stop()
    
    # Keskusteluhistoria
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "assistant", "content": "Miten voin auttaa netti√§ valitessa?"}
        ]
    
    # N√§yt√§ historia
    for msg in st.session_state.messages:
        st.chat_message(msg["role"]).write(msg["content"])
    
    # K√§sittele sy√∂te
    if user_input := st.chat_input("Kirjoita kysymyksesi..."):
        st.session_state.messages.append({"role": "user", "content": user_input})
        st.chat_message("user").write(user_input)
        
        with st.spinner("Etsin parasta ratkaisua..."):
            response = generate_response(user_input, pdf_info)
            if response:
                st.session_state.messages.append(
                    {"role": "assistant", "content": response}
                )
                st.chat_message("assistant").write(response)

if __name__ == "__main__":
    main()
